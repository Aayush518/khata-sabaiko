---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import DashboardCard from '../components/DashboardCard.astro';
import { translations } from '../i18n/translations';
import { db } from '../lib/db';

const lang = Astro.url.searchParams.get('lang') || 'ne';
const t = translations[lang];
---

<Layout title="खाता सबैको - डास्बोर्ड">
  <main class="page-container animate-fade-in">
    <div class="section-header">
      <h1 class="section-title">{t.dashboard.title}</h1>
    </div>
    
    <!-- Dashboard Cards -->
    <div class="grid-cards mb-8" id="dashboardCards">
      <!-- Cards will be dynamically populated -->
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Recent Transactions -->
      <div class="card animate-slide-in" style="animation-delay: 0.1s">
        <div class="card-header">
          <h2 class="text-xl font-semibold flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            {t.dashboard.recentTransactions}
          </h2>
        </div>
        <div class="card-body space-y-4" id="recentTransactions">
          <!-- Transactions will be dynamically populated -->
        </div>
      </div>

      <!-- Low Stock Alert -->
      <div class="card animate-slide-in" style="animation-delay: 0.2s">
        <div class="card-header">
          <h2 class="text-xl font-semibold flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            {t.dashboard.lowStockAlert}
          </h2>
        </div>
        <div class="card-body space-y-4" id="lowStockAlerts">
          <!-- Low stock alerts will be dynamically populated -->
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { db } from '../lib/db';

  // Initialize database
  db.init();

  // Calculate dashboard data
  function updateDashboard() {
    const sales = db.getSales();
    const purchases = db.getPurchases();
    const stocks = db.getStocks();

    const totalSales = sales.reduce((sum, sale) => sum + sale.total, 0);
    const totalPurchases = purchases.reduce((sum, purchase) => sum + purchase.total, 0);
    const stockValue = stocks.reduce((sum, stock) => sum + (stock.quantity * stock.unitPrice), 0);
    const receivables = totalSales - totalPurchases;

    // Update dashboard cards
    const cardsContainer = document.getElementById('dashboardCards');
    if (cardsContainer) {
      cardsContainer.innerHTML = `
        <div class="card bg-gradient-to-br from-green-50 to-emerald-50 animate-slide-in" style="animation-delay: 0.1s">
          <div class="card-body">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-green-800">कुल बिक्री</h3>
              <div class="p-2 bg-green-100 rounded-lg">
                <svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4" />
                </svg>
              </div>
            </div>
            <p class="text-3xl font-bold text-green-900 mt-4">रू ${totalSales.toLocaleString()}</p>
          </div>
        </div>

        <div class="card bg-gradient-to-br from-blue-50 to-indigo-50 animate-slide-in" style="animation-delay: 0.2s">
          <div class="card-body">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-blue-800">कुल खरिद</h3>
              <div class="p-2 bg-blue-100 rounded-lg">
                <svg class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
            </div>
            <p class="text-3xl font-bold text-blue-900 mt-4">रू ${totalPurchases.toLocaleString()}</p>
          </div>
        </div>

        <div class="card bg-gradient-to-br from-purple-50 to-pink-50 animate-slide-in" style="animation-delay: 0.3s">
          <div class="card-body">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-purple-800">प्राप्य रकम</h3>
              <div class="p-2 bg-purple-100 rounded-lg">
                <svg class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
            </div>
            <p class="text-3xl font-bold text-purple-900 mt-4">रू ${receivables.toLocaleString()}</p>
          </div>
        </div>

        <div class="card bg-gradient-to-br from-amber-50 to-orange-50 animate-slide-in" style="animation-delay: 0.4s">
          <div class="card-body">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-amber-800">स्टक मूल्य</h3>
              <div class="p-2 bg-amber-100 rounded-lg">
                <svg class="h-6 w-6 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
              </div>
            </div>
            <p class="text-3xl font-bold text-amber-900 mt-4">रू ${stockValue.toLocaleString()}</p>
          </div>
        </div>
      `;
    }

    // Update recent transactions
    const recentTransactions = [...sales, ...purchases]
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 5);

    const transactionsContainer = document.getElementById('recentTransactions');
    if (transactionsContainer) {
      transactionsContainer.innerHTML = recentTransactions.length ? recentTransactions.map(transaction => {
        const isSale = 'customerName' in transaction;
        return `
          <div class="card hover:bg-gray-50/50">
            <div class="p-4 flex justify-between items-center">
              <div>
                <p class="font-medium">${isSale ? transaction.customerName : transaction.dealerName}</p>
                <p class="text-sm text-gray-500">${new Date(transaction.date).toLocaleDateString()}</p>
              </div>
              <p class="${isSale ? 'text-green-600' : 'text-red-600'} font-medium">
                ${isSale ? '+' : '-'}रू ${transaction.total.toLocaleString()}
              </p>
            </div>
          </div>
        `;
      }).join('') : `
        <div class="text-center text-gray-500 py-4">
          कुनै कारोबार छैन
        </div>
      `;
    }

    // Update low stock alerts
    const lowStockItems = stocks.filter(stock => stock.quantity <= (stock.reorderPoint || 0));
    const alertsContainer = document.getElementById('lowStockAlerts');
    if (alertsContainer) {
      alertsContainer.innerHTML = lowStockItems.length ? lowStockItems.map(item => `
        <div class="card ${item.quantity === 0 ? 'bg-red-50/50' : 'bg-yellow-50/50'}">
          <div class="p-4 flex justify-between items-center">
            <div>
              <p class="font-medium">${item.name}</p>
              <p class="text-sm ${item.quantity === 0 ? 'text-red-600' : 'text-yellow-600'}">
                ${item.quantity} ${item.unit} बाँकी
              </p>
            </div>
            <button 
              onclick="reorderStock(${item.id})"
              class="btn ${item.quantity === 0 ? 'btn-danger' : 'btn-primary'}"
            >
              Reorder
            </button>
          </div>
        </div>
      `).join('') : `
        <div class="text-center text-gray-500 py-4">
          सबै स्टक पर्याप्त मात्रामा छ
        </div>
      `;
    }
  }

  // Initial update
  updateDashboard();

  // Make reorderStock function available globally
  window.reorderStock = (stockId) => {
    const stocks = db.getStocks();
    const stock = stocks.find(s => s.id === stockId);
    if (!stock) return;

    const quantity = prompt(`Enter reorder quantity for ${stock.name}:`);
    if (!quantity) return;

    const parsedQuantity = parseInt(quantity);
    if (isNaN(parsedQuantity) || parsedQuantity <= 0) {
      Toast.show('Invalid quantity. Please enter a positive number.', 'error');
      return;
    }

    // Update stock quantity
    db.updateStock(stockId, { ...stock, quantity: stock.quantity + parsedQuantity });
    updateDashboard();
    Toast.show(`Successfully reordered ${parsedQuantity} ${stock.unit} of ${stock.name}`, 'success');
  };
</script>