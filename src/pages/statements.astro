---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import { translations } from '../i18n/translations';

const lang = Astro.url.searchParams.get('lang') || 'ne';
const t = translations[lang];
---

<Layout title={`खाता सबैको - ${t.nav.statements}`}>
  <Navbar />
  
  <main class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
    <div class="bg-white rounded-lg shadow-lg p-6">
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-gray-900">{t.nav.statements}</h1>
        <div class="flex gap-4">
          <button id="printStatement" class="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-2 rounded-lg shadow-md hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v3a2 2 0 002 2h1v2a2 2 0 002 2h6a2 2 0 002-2v-2h1a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zm0 8H7v4h6v-4z" clip-rule="evenodd" />
            </svg>
            Print
          </button>
          <button id="exportStatement" class="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-2 rounded-lg shadow-md hover:from-green-700 hover:to-emerald-700 transition-all duration-200 flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
            Export
          </button>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="bg-gray-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Summary</h2>
          <div class="space-y-4">
            <div class="flex justify-between">
              <span class="text-gray-600">Total Sales:</span>
              <span class="font-medium" id="totalSales">रू 0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Total Purchases:</span>
              <span class="font-medium" id="totalPurchases">रू 0</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Net Profit:</span>
              <span class="font-medium text-green-600" id="netProfit">रू 0</span>
            </div>
          </div>
        </div>

        <div class="bg-gray-50 rounded-lg p-6">
          <h2 class="text-xl font-semibold mb-4">Date Range</h2>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700">From</label>
              <input type="date" id="dateFrom" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">To</label>
              <input type="date" id="dateTo" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
          </div>
        </div>
      </div>

      <div class="space-y-8">
        <div>
          <h2 class="text-xl font-semibold mb-4">Sales Breakdown</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                </tr>
              </thead>
              <tbody id="salesBreakdown" class="bg-white divide-y divide-gray-200">
                <!-- Sales breakdown will be loaded here -->
              </tbody>
            </table>
          </div>
        </div>

        <div>
          <h2 class="text-xl font-semibold mb-4">Purchases Breakdown</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dealer</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
                  <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                </tr>
              </thead>
              <tbody id="purchasesBreakdown" class="bg-white divide-y divide-gray-200">
                <!-- Purchases breakdown will be loaded here -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { db } from '../lib/db';

  function updateStatement() {
    const dateFrom = (document.getElementById('dateFrom') as HTMLInputElement).value;
    const dateTo = (document.getElementById('dateTo') as HTMLInputElement).value;

    const sales = db.getSales().filter(sale => {
      const saleDate = new Date(sale.date);
      return (!dateFrom || saleDate >= new Date(dateFrom)) &&
             (!dateTo || saleDate <= new Date(dateTo));
    });

    const purchases = db.getPurchases().filter(purchase => {
      const purchaseDate = new Date(purchase.date);
      return (!dateFrom || purchaseDate >= new Date(dateFrom)) &&
             (!dateTo || purchaseDate <= new Date(dateTo));
    });

    // Update summary
    const totalSales = sales.reduce((sum, sale) => sum + sale.total, 0);
    const totalPurchases = purchases.reduce((sum, purchase) => sum + purchase.total, 0);
    const netProfit = totalSales - totalPurchases;

    document.getElementById('totalSales')!.textContent = `रू ${totalSales.toLocaleString()}`;
    document.getElementById('totalPurchases')!.textContent = `रू ${totalPurchases.toLocaleString()}`;
    document.getElementById('netProfit')!.textContent = `रू ${netProfit.toLocaleString()}`;

    // Update sales breakdown
    const salesTbody = document.getElementById('salesBreakdown');
    if (salesTbody) {
      salesTbody.innerHTML = sales.map(sale => `
        <tr class="hover:bg-gray-50">
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
            ${new Date(sale.date).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
            ${sale.customerName}
          </td>
          <td class="px-6 py-4 text-sm text-gray-500">
            ${sale.items.map(item => `${item.name} (${item.quantity})`).join(', ')}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
            रू ${sale.total.toLocaleString()}
          </td>
        </tr>
      `).join('');
    }

    // Update purchases breakdown
    const purchasesTbody = document.getElementById('purchasesBreakdown');
    if (purchasesTbody) {
      purchasesTbody.innerHTML = purchases.map(purchase => `).join('');
    }
  }

  // Initial load
  updateStatement();

  // Add event listeners for date inputs
  document.getElementById('dateFrom')?.addEventListener('change', updateStatement);
  document.getElementById('dateTo')?.addEventListener('change', updateStatement);

  // Print statement
  document.getElementById('printStatement')?.addEventListener('click', () => {
    window.print();
  });

  // Export statement
  document.getElementById('exportStatement')?.addEventListener('click', () => {
    const dateFrom = (document.getElementById('dateFrom') as HTMLInputElement).value;
    const dateTo = (document.getElementById('dateTo') as HTMLInputElement).value;

    const sales = db.getSales().filter(sale => {
      const saleDate = new Date(sale.date);
      return (!dateFrom || saleDate >= new Date(dateFrom)) &&
             (!dateTo || saleDate <= new Date(dateTo));
    });

    const purchases = db.getPurchases().filter(purchase => {
      const purchaseDate = new Date(purchase.date);
      return (!dateFrom || purchaseDate >= new Date(dateFrom)) &&
             (!dateTo || purchaseDate <= new Date(dateTo));
    });

    const data = {
      dateRange: {
        from: dateFrom || 'All time',
        to: dateTo || 'All time'
      },
      summary: {
        totalSales: sales.reduce((sum, sale) => sum + sale.total, 0),
        totalPurchases: purchases.reduce((sum, purchase) => sum + purchase.total, 0),
        netProfit: sales.reduce((sum, sale) => sum + sale.total, 0) - 
                  purchases.reduce((sum, purchase) => sum + purchase.total, 0)
      },
      sales,
      purchases
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `statement-${dateFrom || 'all'}-to-${dateTo || 'all'}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });
</script>