---
interface Props {
  title: string;
  amount: number;
  type: 'success' | 'warning' | 'info' | 'error';
  icon: string;
  trend?: {
    value: number;
    isPositive: boolean;
  };
}

const { title, amount, type, icon, trend } = Astro.props;

const colors = {
  success: 'bg-green-50 text-green-700 ring-green-600/20',
  warning: 'bg-yellow-50 text-yellow-700 ring-yellow-600/20',
  info: 'bg-blue-50 text-blue-700 ring-blue-600/20',
  error: 'bg-red-50 text-red-700 ring-red-600/20'
};

const iconColors = {
  success: 'text-green-600',
  warning: 'text-yellow-600',
  info: 'text-blue-600',
  error: 'text-red-600'
};
---

<div class={`relative overflow-hidden rounded-xl ${colors[type]} ring-1 ring-inset p-6`}>
  <dt>
    <div class={`absolute rounded-lg p-2 ${iconColors[type]}`}>
      <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" set:html={icon} />
    </div>
    <p class="ml-16 truncate text-sm font-medium">{title}</p>
  </dt>
  <dd class="ml-16 flex items-baseline">
    <p class="text-2xl font-semibold">
      रू {amount.toLocaleString()}
    </p>
    {trend && (
      <p class={`ml-2 flex items-baseline text-sm font-semibold ${trend.isPositive ? 'text-green-600' : 'text-red-600'}`}>
        <span class="sr-only">{trend.isPositive ? 'Increased' : 'Decreased'} by</span>
        {trend.isPositive ? '↑' : '↓'}{Math.abs(trend.value)}%
      </p>
    )}
  </dd>
</div>